#!/usr/bin/env node

var nodePath  = require('path')
var program   = require('commander')
var fse       = require("fs-extra")
var pkg       = require('../package.json')
var helpers   = require("../lib/helpers")
var harp      = require('../')

var output = function(msg){
  var v = pkg.version
  console.log("-------------")
  console.log("Harp v"+ v)
  if(msg){
    console.log(msg)
  }
  console.log("-------------")
}

var quitInstructions = 'Press Ctl+C to stop the server';


program
  .version(pkg.version)

program
  .command('init [path]')
  .usage("initializes a new Harp project in the current directory.\n  Use the init command if itâ€™s your first time using Harp and you want to create a new project.")
  .description('Initialize a new Harp project in current directory')
  .action(function(path, program){
    var projectPath     = nodePath.resolve(process.cwd(), path || "")
    var boilerplatePath = nodePath.resolve(__dirname, "..", "lib", "sample")

    var done = function(err){
      console.log('Initialized project at', projectPath)
    }

    fse.mkdirp(projectPath, function(err){
      if(err) return err

      fse.readdir(projectPath, function(err, contents){
        if(err) return err
        if(contents.length == 0){
          fse.readdir(boilerplatePath, function(err, contents){
            if(err) return err
            var total = contents.length
            var count = 0
            contents.forEach(function(i){
              var fromPath = nodePath.resolve(boilerplatePath, i)
              var toPath   = nodePath.resolve(projectPath, i)
              fse.copy(fromPath, toPath, function(err){
                count++
                if(count == total) done()
              })
            })
          })
        }else{
          console.log("Sorry,", projectPath, " must be empty.")
        }
        var count = 0

      })
    })

  })

program
  .command('server [path]')
  .option('-p, --port <port>', 'Specify a port to listen on')
  .usage('starts a Harp server in current directory, or the specified directory.')
  .description('Start a Harp server in current directory')
  .action(function(path, program){
    var projectPath = nodePath.resolve(process.cwd(), path || "")
    var port        = program.port || 9000
    harp.server(projectPath, { port: port }, function(){
      output("Hosting project at http://localhost:" + port + "/\n" + quitInstructions)
    })
  })

program
  .command('multihost [path]')
  .option('-p, --port <port>', 'Specify a port to listen on')
  .usage('starts a Harp server to host a directory of Harp projects.')
  .description('Start a Harp server to host a directory of Harp projects')
  .action(function(path, program){
    var projectPath = nodePath.resolve(process.cwd(), path || "")
    var port        = program.port || 9000
    harp.multihost(projectPath, { port: port }, function(){
      if(port == "80"){
        var loc = "http://harp.nu"
      }else{
        var loc = "http://harp.nu:" + port
      }
      output("Hosting multiple projects at " + loc + "\n" + quitInstructions)
    })
  })

program
  .command('compile [projectPath] [outputPath]')
  .option('-o, --output <path>', 'Specify the output directory for compiled assets (relative to project path)')
  .usage('compile your project files to static assets (HTML, JS and CSS). \n  Use this command if you want to host your application without using the Harp web server.')
  .description('Compile project to static assets (HTML, JS and CSS)')
  .action(function(projectPath, outputPath, program){

    if(!program){
      program    = outputPath
      outputPath = null
    }

    projectPath = nodePath.resolve(process.cwd(), projectPath || "")

    /**
     * We deal with output path 3 different ways
     *
     *  1. second argument (relative to directory called in)
     *  2. `--output` argument (relative to project root)
     *  3. implicitly projectPath + "/www"
     *
     */

    if(outputPath){
      outputPath = nodePath.resolve(process.cwd(), (outputPath || program.output || ''))
    }else{
      outputPath = nodePath.resolve(projectPath, (program.output || "www"))
    }

    harp.compile(projectPath, outputPath, function(errors, output){
      if(errors) console.log(JSON.stringify(errors, null, 2))
    })
  })

program.on('--help', function(){
  console.log("  Use 'harp <command> --help' to get more information or visit http://harpjs.com/ to learn more.");
  console.log('');
});

program.parse(process.argv)

if(program.args.length < 1){
  program.help()
}